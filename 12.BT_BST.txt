//Binary Tree:
#include<stdio.h>
#include<stdlib.h>
int front,rear=0;

struct queue {
    struct queue *next,*front,*rear;
    struct node *data;
};

struct node {
    int data;
    struct node *left,*right,*next;
};

void initializeQueue(struct queue *q){
    q->front=q->rear=NULL;
}
struct node *top=NULL;

void enqueue(struct queue *q, struct node *data){
    struct queue *temp=(struct queue *)malloc(sizeof(struct queue));
    temp->data=data;
    temp->next=NULL;
    if(q->rear==NULL){
        q->front=q->rear=temp;
    }
    else{
        q->rear->next=temp;
        q->rear=temp;
    }
}

struct node *dequeue(struct queue *q){
    if(q->front==NULL){
        return NULL;
    }
    struct node *data=q->front->data;
    struct queue *temp=q->front;
    q->front=q->front->next;
    if(q->front==NULL){
        q->rear=NULL;
    }
    free(temp);
    return data;
}
void push(int num){
    struct node *temp=(struct node *)malloc(sizeof(struct node));
    temp->data=num;
    temp->next=top;
    top=temp;
}

int pop(){
    struct node *temp;
    int num=top->data;
    temp=top;
    top=top->next;
    free(temp);
    return num;
}

void inorder(struct node *root){
    struct node *temp=root;
    while(temp!=NULL){
        push(temp);
        temp=temp->left;
    }
    while(top!=NULL){
        temp=pop();
        printf("%d ",temp->data);
        temp=temp->right;
        while(temp!=NULL){
            push(temp);
            temp=temp->left;
        }
    }
}

void preorder(struct node *root){
   struct node *temp=root;
   while(temp!=NULL){
        printf("%d ",temp->data);
        push(temp);
        temp=temp->left;
   }
   while(top!=NULL){
        temp=pop();
        temp=temp->right;
        while(temp!=NULL){
            printf("%d ",temp->data);
            push(temp);
            temp=temp->left;
        }
   }
}

void postorder(struct node *root){
    struct node *temp=root;
    while(temp!=NULL){
        push(temp);
        temp=temp->left;
    }
    struct node *prev=NULL;
    while(top!=NULL && temp==NULL){
        temp=top->data;
        if(temp->right==NULL ||temp->right==prev){
            printf("%d ",temp->data);
            pop();
            prev=temp;
            temp=NULL;
        }
        else{
            temp=temp->right;
            while(temp!=NULL){
                push(temp);
                temp=temp->left;
            }
        }
    }
}

void levelwise(struct node *root){
    if(root==NULL){
        return;
    }
    struct queue q;
    initializeQueue(&q);
    enqueue(&q,root);
    while(q.front!=NULL){
        root=dequeue(&q);
        printf("%d ",root->data);
    if(root->left!=NULL){
        enqueue(&q,root->left);
    }
    if(root->right!=NULL){
        enqueue(&q,root->right);
    }
    }
}

struct node *insert(){
    int val;
    struct node *temp=(struct node *)malloc(sizeof(struct node));
        printf("\nEnter value to insert (-1 for no new node)");
        scanf("%d",&val);
        if(val==-1){
            return 0;
        }
        else{
        temp->data=val;
        temp->left=NULL;
        temp->right=NULL;
        printf("\nLeft of %d",val);
        temp->left=insert();
        printf("\nRight of %d",val);
        temp->right=insert();
        return temp;
        }
}

int count(struct node *root){
    int c=0;
    if(root==NULL){
        return 0;
    }
    if(root->left==NULL && root->right==NULL){
        return 1;
    }
    while(root!=NULL){
        push(root);
        root=root->left;
    }
    while(top!=NULL){
        c++;
        root=pop();
        root=root->right;
        while(root!=NULL){
            push(root);
            root=root->left;
        }
    }
    return c;
}

int countleaf(struct node *root){
    int c=0;
    push(root);
    while(top!=NULL){
        root=pop();
        if(root->left==NULL && root->right==NULL){
            c++;
        }
        if(root->left!=NULL){
            push(root->left);
        }
        if(root->right!=NULL){
            push(root->right);
        }
    }
    return c;
}

void displayLeaf(struct node *root){
    push(root);
    while(top!=NULL){
        root=pop();
        if(root->left==NULL && root->right==NULL){
            printf("%d ",root->data);
        }
        if(root->left!=NULL){
            push(root->left);
        }
        if(root->right!=NULL){
            push(root->right);
        }
    }
}

void mirror(struct node *root){
    if(root==NULL){
        return;
    }
    push(root);
    while(top!=NULL){
        struct node *temp=pop();
        struct node *current=temp->left;
        temp->left=temp->right;
        temp->right=current;
        if(temp->right!=NULL){
            push(temp->right);
        }
        if(temp->left!=NULL){
            push(temp->left);
        }
    }
}

int height(struct node *root){
    if(root == NULL){
        return 0;
    }

    struct queue q;
    initializeQueue(&q);
    enqueue(&q, root);
    int h = 0;

    while(q.front != NULL){
        int levelNodes = 0;
        struct queue *temp = q.front;
        while(temp != NULL){
            levelNodes++;
            temp = temp->next;
        }

        while(levelNodes > 0){
            struct node *current = dequeue(&q);
            if(current->left != NULL){
                enqueue(&q, current->left);
            }
            if(current->right != NULL){
                enqueue(&q, current->right);
            }
            levelNodes--;
        }
        h++;
    }
    return h;
}

int main(){
    struct node *root=insert();
    printf("\nINORDER: ");
    inorder(root);
    printf("\nPREORDER:");
    preorder(root);
    printf("\nPOSTORDER:");
    postorder(root);
    printf("\nLEVEL WISE:");
    levelwise(root);
    printf("\nTOTAL NODE COUNT: %d",count(root));
    printf("\nLEAF NODE COUNT: %d",countleaf(root));
    printf("\nLEAF NODES: ");
    displayLeaf(root);
    printf("\nMIRROR (LEVELWISE):");
    mirror(root);
    levelwise(root);
    mirror(root);
    printf("\nHEIGHT: %d",height(root));

    return 0;
}

//Write a program to illustrate operations on a BST holding numeric keys. The menu must include:

#include<stdio.h>
#include<stdlib.h>
int front,rear=0;

struct node {
    int data;
    struct node *left, *right, *next;
};

struct queue{
    struct queue *front;
    struct queue *rear;
    struct queue *next;
    struct node *data;
};

void initializeQueue(struct queue *q){
    q->front=q->rear=NULL;
}

void enqueue(struct node *item, struct queue *q){
    struct queue *temp=(struct queue *)malloc(sizeof(struct queue));
    temp->data=item;
    temp->next=NULL;
    if(q->rear==NULL){
        q->front=q->rear=temp;
    }
    else{
        q->rear->next=temp;
        q->rear=temp;
    }
}

struct node * dequeue(struct queue *q){
    if(q->front==NULL){
        return NULL;
    }
    struct node *item=q->front->data;
    struct queue *temp=q->front;
    q->front=q->front->next;
    if(q->front==NULL){
        q->rear=NULL;
    }
    free(temp);
    return item;
}

struct node *top=NULL;

void push(int num){
    struct node *p=(struct node *)malloc(sizeof(struct node));
    p->data=num;
    p->next=top;
    top=p;
}

int pop(){
    struct node *temp;
    int x= top->data;
    temp=top;
    top=top->next;
    free(temp);
    return x;
}

struct node *stackTop(struct node *top){
    if(top==NULL){
        return NULL;
    }
    return top->data;
}


void inorder(struct node *root){
    struct node *temp=root;
    while(temp!=NULL){
        push(temp);
        temp=temp->left;
    }
    while(top!=NULL){
        temp=pop();
        printf("%d ",temp->data);
        temp=temp->right;
        while(temp!=NULL){
            push(temp);
            temp=temp->left;
        }
    }
}

void preorder(struct node *root){
   struct node *temp=root;
   while(temp!=NULL){
        printf("%d ",temp->data);
        push(temp);
        temp=temp->left;
   }
   while(top!=NULL){
        temp=pop();
        temp=temp->right;
        while(temp!=NULL){
            printf("%d ",temp->data);
            push(temp);
            temp=temp->left;
        }
   }
}

void postorder(struct node *root){
    struct node *temp=root;
    while(temp!=NULL){
        push(temp);
        temp=temp->left;
    }
    struct node *prev=NULL;
    while(top!=NULL && temp==NULL){
        temp=top->data;
        if(temp->right==NULL ||temp->right==prev){
            printf("%d ",temp->data);
            pop();
            prev=temp;
            temp=NULL;
        }
        else{
            temp=temp->right;
            while(temp!=NULL){
                push(temp);
                temp=temp->left;
            }
        }
    }
}

struct node *insert(struct node *root, int val){
    struct node *temp=(struct node *)malloc(sizeof(struct node));
    struct node *p=NULL;
    temp->data=val;
    temp->left=NULL;
    temp->right=NULL;
    if(root==NULL){
        return temp;
    }
    p=root;
        while(p!=NULL){
            if(val<p->data){
                if(p->left==NULL){
                    p->left=temp;
                    break;
                }
                else{
                    p=p->left;
                }
            }
            else{
                if(p->right==NULL){
                    p->right=temp;
                    break;
                }
                else{
                    p=p->right;
                }
            }
        }
    return root;
}

struct node *findMinOfRight(struct node *root){
    struct node *temp=root;
    temp=temp->right;
    while(temp->left!=NULL){
        temp=temp->left;
    }
    return temp;
}

struct node *del(struct node *root, int val){
    struct node *temp;
    if(root==NULL){
        return root;
    } else if (val < root->data) {
        root->left = del(root->left, val);
    } else if (val > root->data) {
        root->right = del(root->right, val);
    } else{
        if(root->left==NULL){
            temp = root->right;
            free(root);
            return temp;
        }
        else if (root->right ==NULL){
            temp = root->left;
            free(root);
            return temp;
        }
        temp=findMinOfRight(root);
        temp->data=root->data;
        root->right =del(temp->right,temp->data);
    }
    return root;
}

void levelWise(struct node *root){
    if(root==NULL){
        return;
    }
    struct queue q;
    initializeQueue(&q);
    enqueue(root,&q);
    while (q.front != NULL) {
        root = dequeue(&q);

        printf("%d ", root->data);

        if (root->left != NULL) {
            enqueue(root->left, &q);
        }

        if (root->right != NULL) {
            enqueue(root->right, &q);
        }
    }
}

void displayLeaf(struct node *root){
    push(root);
    while(top!=NULL){
        root=pop();
        if(root->left==NULL && root->right==NULL){
            printf("%d ",root->data);
        }
        if(root->left!=NULL){
            push(root->left);
        }
        if(root->right!=NULL){
            push(root->right);
        }
    }
}

int count(struct node *root){
    int c=0;
    if(root==NULL){
        return 0;
    }
    if(root->left==NULL && root->right==NULL){
        return 1;
    }
    while(root!=NULL){
        push(root);
        root=root->left;
    }
    while(top!=NULL){
        c++;
        root=pop();
        root=root->right;
        while(root!=NULL){
            push(root);
            root=root->left;
        }
    }
    return c;
}

int countleaf(struct node *root){
    int c=0;
    push(root);
    while(top!=NULL){
        root=pop();
        if(root->left==NULL && root->right==NULL){
            c++;
        }
        if(root->left!=NULL){
            push(root->left);
        }
        if(root->right!=NULL){
            push(root->right);
        }
    }
    return c;
}


void mirror(struct node *root){
    if(root==NULL){
        return;
    }
    push(root);
    while(top!=NULL){
        struct node *temp=pop();
        struct node * current=temp->left;
        temp->left=temp->right;
        temp->right=current;
        if(temp->right !=NULL){
            push(temp->right);
        }
        if(temp->left!=NULL){
            push(temp->left);
        }
    }
}

int height(struct node * root){
    if(root==NULL){
        return 0;
    }
    int h=0;
    struct queue q;
    initializeQueue(&q);
    enqueue(&q,root);
    while(q.front!=NULL){

        int levelNodes=q.rear-q.front+1;
        while(levelNodes>0){
            struct node *current = dequeue(&q);
            if(current->left!=NULL){
                enqueue(&q,current->left);
            }
            if(current->right!=NULL){
                enqueue(&q,current->right);
            }
            levelNodes--;
        }
        h++;
    return h;
    }
}

int main(){
    struct node *root=NULL;
    int choice,n,i;
    root=insert(root,26);
    root=insert(root,4);
    root=insert(root,24);
    root=insert(root,10);
    root=insert(root,9);
    root=insert(root,21);
    root=insert(root,89);
    root=insert(root,901);
    root=insert(root,14);
    root=insert(root,16);
    del(root,24);
    printf("\nINORDER: ");
    inorder(root);
    printf("\nPREORDER:");
    preorder(root);
    printf("\nPOSTORDER:");
    postorder(root);
    printf("\nLEVEL WISE:");
    levelWise(root);
    printf("\nTOTAL NODE COUNT: %d",count(root));
    printf("\nLEAF NODE COUNT: %d",countleaf(root));
    printf("\nLEAF NODES: ");
    displayLeaf(root);
    printf("\nMIRROR (LEVELWISE):");
    mirror(root);
    levelWise(root);
    mirror(root);
    printf("\nHEIGHT incorrect: %d",height(root));
    return 0;
}