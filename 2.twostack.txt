//twostack
#include <stdio.h>
#include <stdlib.h>

#define MAX 100

typedef struct {
    int top1;
    int top2;
    int arr[MAX];
} TwoStacks;

// Function to initialize the stacks
void initStacks(TwoStacks *stacks) {
    stacks->top1 = -1;
    stacks->top2 = MAX;
}

// Function to check if Stack 1 is empty
int isEmptyStack1(TwoStacks *stacks) {
    return stacks->top1 == -1;
}

// Function to check if Stack 2 is empty
int isEmptyStack2(TwoStacks *stacks) {
    return stacks->top2 == MAX;
}

// Function to check if the array is full
int isFull(TwoStacks *stacks) {
    return stacks->top1 + 1 == stacks->top2;
}

// Function to push an element to Stack 1
void pushStack1(TwoStacks *stacks, int value) {
    if (isFull(stacks)) {
        printf("Stack Overflow\n");
        return;
    }
    stacks->arr[++(stacks->top1)] = value;
}

// Function to push an element to Stack 2
void pushStack2(TwoStacks *stacks, int value) {
    if (isFull(stacks)) {
        printf("Stack Overflow\n");
        return;
    }
    stacks->arr[--(stacks->top2)] = value;
}

// Function to pop an element from Stack 1
int popStack1(TwoStacks *stacks) {
    if (isEmptyStack1(stacks)) {
        printf("Stack 1 Underflow\n");
        return -1;
    }
    return stacks->arr[(stacks->top1)--];
}

// Function to pop an element from Stack 2
int popStack2(TwoStacks *stacks) {
    if (isEmptyStack2(stacks)) {
        printf("Stack 2 Underflow\n");
        return -1;
    }
    return stacks->arr[(stacks->top2)++];
}

// Function to display Stack 1
void displayStack1(TwoStacks *stacks) {
    if (isEmptyStack1(stacks)) {
        printf("Stack 1 is empty\n");
        return;
    }
    printf("Stack 1: ");
    for (int i = 0; i <= stacks->top1; i++) {
        printf("%d ", stacks->arr[i]);
    }
    printf("\n");
}

// Function to display Stack 2
void displayStack2(TwoStacks *stacks) {
    if (isEmptyStack2(stacks)) {
        printf("Stack 2 is empty\n");
        return;
    }
    printf("Stack 2: ");
    for (int i = MAX - 1; i >= stacks->top2; i--) {
        printf("%d ", stacks->arr[i]);
    }
    printf("\n");
}

int main() {
    TwoStacks stacks;
    int choice, value;

    initStacks(&stacks);

    while (1) {
        printf("\nMenu:\n");
        printf("1. Push to Stack 1\n");
        printf("2. Push to Stack 2\n");
        printf("3. Pop from Stack 1\n");
        printf("4. Pop from Stack 2\n");
        printf("5. Check if Stacks are Full\n");
        printf("6. Check if Stack 1 is Empty\n");
        printf("7. Check if Stack 2 is Empty\n");
        printf("8. Display Stack 1\n");
        printf("9. Display Stack 2\n");
        printf("10. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter value to push to Stack 1: ");
                scanf("%d", &value);
                pushStack1(&stacks, value);
                break;
            case 2:
                printf("Enter value to push to Stack 2: ");
                scanf("%d", &value);
                pushStack2(&stacks, value);
                break;
            case 3:
                value = popStack1(&stacks);
                if (value != -1) {
                    printf("Popped from Stack 1: %d\n", value);
                }
                break;
            case 4:
                value = popStack2(&stacks);
                if (value != -1) {
                    printf("Popped from Stack 2: %d\n", value);
                }
                break;
            case 5:
                if (isFull(&stacks)) {
                    printf("Both stacks are full\n");
                } else {
                    printf("Stacks are not full\n");
                }
                break;
            case 6:
                if (isEmptyStack1(&stacks)) {
                    printf("Stack 1 is empty\n");
                } else {
                    printf("Stack 1 is not empty\n");
                }
                break;
            case 7:
                if (isEmptyStack2(&stacks)) {
                    printf("Stack 2 is empty\n");
                } else {
                    printf("Stack 2 is not empty\n");
                }
                break;
            case 8:
                displayStack1(&stacks);
                break;
            case 9:
                displayStack2(&stacks);
                break;
            case 10:
                exit(0);
            default:
                printf("Invalid choice\n");
        }
    }

    return 0;
}
