// Write a Program to implement multiple two queues using array and perform following operations on it. A. Addq, B. Delq, C. Display //Queue.

#include <stdio.h>
#include <stdlib.h>

#define SIZE 30

struct queue {
    int front1;
    int rear1;
    int front2;
    int rear2;
    int arr[SIZE];
};

typedef struct queue Queue;

void initializeTwoQueues(Queue* q) {
    q->front1 = -1;
    q->rear1 = -1;
    q->front2 = SIZE;
    q->rear2 = SIZE;
}

void insertQueue1(Queue* q, int key) {
    if (q->rear1 + 1 == q->rear2) {
        printf("\nOverflow.\n");
    } else {
        if (q->front1 == -1) {
            q->front1 = 0;
        }
        q->arr[++q->rear1] = key;
    }
}

void insertQueue2(Queue* q, int key) {
    if (q->rear2 - 1 == q->rear1) {
        printf("\nOverflow.\n");
    } else {
        if (q->front2 == SIZE) {
            q->front2 = SIZE - 1;
        }
        q->arr[--q->rear2] = key;
    }
}

int deleteQueue1(Queue* q) {
    if (q->front1 == -1) {
        printf("\nUnderflow.\n");
        return -1;
    } else {
        int key = q->arr[q->front1];
        if (q->front1 == q->rear1) {
            q->front1 = -1;
            q->rear1 = -1;
        } else {
            q->front1++;
        }
        return key;
    }
}

int deleteQueue2(Queue* q) {
    if (q->front2 == SIZE) {
        printf("\nUnderflow.\n");
        return -1;
    } else {
        int key = q->arr[q->front2];
        if (q->front2 == q->rear2) {
            q->front2 = SIZE;
            q->rear2 = SIZE;
        } else {
            q->front2--;
        }
        return key;
    }
}

void displayQueue1(Queue* q) {
    if (q->front1 == -1) {
        printf("Queue 1 is empty\n");
    } else {
        printf("Queue 1: ");
        for (int i = q->front1; i <= q->rear1; i++) {
            printf("%d ", q->arr[i]);
        }
        printf("\n");
    }
}

void displayQueue2(Queue* q) {
    if (q->front2 == SIZE) {
        printf("Queue 2 is empty\n");
    } else {
        printf("Queue 2: ");
        for (int i = q->rear2; i <= q->front2; i++) {
            printf("%d ", q->arr[i]);
        }
        printf("\n");
    }
}

int main() {
    Queue q;
    int n, choice, queue_number;
    initializeTwoQueues(&q);

    while (1) {
        printf("\n1. Insert to Queue");
        printf("\n2. Delete from Queue");
        printf("\n3. Display Queue");
        printf("\n4. Exit");
        printf("\nEnter choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the queue number (1 or 2): ");
                scanf("%d", &queue_number);
                printf("Enter the value to be inserted: ");
                scanf("%d", &n);
                if (queue_number == 1) {
                    insertQueue1(&q, n);
                } else if (queue_number == 2) {
                    insertQueue2(&q, n);
                } else {
                    printf("Invalid queue number\n");
                }
                break;

            case 2:
                printf("Enter the queue number (1 or 2): ");
                scanf("%d", &queue_number);
                if (queue_number == 1) {
                    n = deleteQueue1(&q);
                    if (n != -1) printf("Deleted from Queue 1: %d\n", n);
                } else if (queue_number == 2) {
                    n = deleteQueue2(&q);
                    if (n != -1) printf("Deleted from Queue 2: %d\n", n);
                } else {
                    printf("Invalid queue number\n");
                }
                break;

            case 3:
                printf("Enter the queue number (1 or 2): ");
                scanf("%d", &queue_number);
                if (queue_number == 1) {
                    displayQueue1(&q);
                } else if (queue_number == 2) {
                    displayQueue2(&q);
                } else {
                    printf("Invalid queue number\n");
                }
                break;

            case 4:
                exit(0);
                break;

            default:
                printf("Invalid choice\n");
        }
    }

    return 0;
}
