//Write a Program to implement circular double ended queue where user can add and remove the elements from both front and rear of the queue

#include<stdio.h>
#include<stdlib.h>
#define SIZE 30

struct queue {
    int data[SIZE];
    int rear, front;
};

typedef struct queue queue;

void initializeQueue(queue *q) {
    q->front = -1;
    q->rear = -1;
    for (int i = 0; i < SIZE; i++) {
        q->data[i] = 0;
    }
}

void insertFront(queue *q, int num) {
    if (q->front == (q->rear + 1) % SIZE) {
        printf("\nQueue is full!\n");
        return;
    } else if (q->front == -1) {
        q->front = 0;
        q->rear = 0;
        q->data[q->front] = num;
    } else {
        q->front = (q->front - 1 + SIZE) % SIZE;
        q->data[q->front] = num;
    }
}

void insertRear(queue *q, int num) {
    if (q->front == (q->rear + 1) % SIZE) {
        printf("\nQueue is full!\n");
        return;
    } else if (q->front == -1) {
        q->front = 0;
        q->rear = 0;
    } else {
        q->rear = (q->rear + 1) % SIZE;
    }
    q->data[q->rear] = num;
}

int deleteFront(queue *q) {
    if (q->front == -1) {
        printf("\nQueue is empty!\n");
        return -1;
    }
    int n = q->data[q->front];
    if (q->front == q->rear) {
        initializeQueue(q);
    } else {
        q->front = (q->front + 1) % SIZE;
    }
    return n;
}

int deleteRear(queue *q) {
    if (q->front == -1) {
        printf("\nQueue is empty!\n");
        return -1;
    }
    int n = q->data[q->rear];
    if (q->front == q->rear) {
        initializeQueue(q);
    } else {
        q->rear = (q->rear - 1 + SIZE) % SIZE;
    }
    return n;
}

void display(queue *q) {
    if (q->front == -1) {
        printf("\nQueue is empty!\n");
        return;
    }
    printf("QUEUE: ");
    int i = q->front;
    do {
        printf("%d ", q->data[i]);
        i = (i + 1) % SIZE;
    } while (i != (q->rear + 1) % SIZE);
    printf("\n");
}

int main() {
    queue q;
    int n;
    int choice;
    initializeQueue(&q);

    while (1) {
        printf("\nMENU\n");
        printf("1. Insert from front end\n");
        printf("2. Insert from rear end\n");
        printf("3. Remove from front end\n");
        printf("4. Remove from rear end\n");
        printf("5. Display queue\n");
        printf("6. Exit\n");
        printf("ENTER CHOICE: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                printf("Enter element to insert: ");
                scanf("%d", &n);
                insertFront(&q, n);
                break;
            case 2:
                printf("Enter element to insert: ");
                scanf("%d", &n);
                insertRear(&q, n);
                break;
            case 3:
                deleteFront(&q);
                break;
            case 4:
                deleteRear(&q);
                break;
            case 5:
                display(&q);
                break;
            case 6:
                exit(0);
                break;
            default:
                printf("Invalid choice\n");
        }
    }
    return 0;
}
